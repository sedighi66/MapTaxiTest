apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: "kotlin-allopen"
apply plugin: 'androidx.navigation.safeargs.kotlin'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation('org.msfox.maptaxitest.utils.OpenClass')
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "org.msfox.maptaxitest"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        //if we don't override AppTestRunner, we will get no injector found for our fragments
        testInstrumentationRunner "org.msfox.maptaxitest.utils.AppTestRunner"

        //for map, because we use uiautomator, we have to change testInstrumentationRunner to default
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Read the API key from ./secure.properties into R.string.maps_api_key
        def secureProps = new Properties()
        if (file("./secure.properties").exists()) {
            file("./secure.properties")?.withInputStream { secureProps.load(it) }
        } else {
            println("Error =====> secure.properties has not been finded. So map does not have api key.")
        }
        resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    buildFeatures {
        dataBinding = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerview"
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.core:core-ktx:$versions.core_ktx"
    implementation "androidx.transition:transition:$versions.transition"
    debugImplementation "androidx.fragment:fragment-testing:${versions.fragment}"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$versions.navigation"
    androidTestImplementation "androidx.navigation:navigation-testing:$versions.navigation"

    implementation "androidx.room:room-runtime:$versions.room"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.github.bumptech.glide:glide:$versions.glide"

    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    implementation "com.jakewharton.timber:timber:$versions.timber"

    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "androidx.room:room-compiler:$versions.room"
    //noinspection LifecycleAnnotationProcessorWithJava8
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"

    testImplementation "androidx.test.ext:junit:$versions.atsl_junit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    testImplementation "androidx.arch.core:core-testing:$versions.arch_core"
    testImplementation "org.mockito:mockito-core:$versions.mockito"

    androidTestImplementation "androidx.test:core:$versions.atsl_core"
    androidTestImplementation "androidx.test.ext:junit:$versions.atsl_junit"
    androidTestImplementation "androidx.test:runner:$versions.atsl_runner"
    androidTestImplementation "androidx.test:rules:$versions.atsl_rules"

    androidTestImplementation "androidx.appcompat:appcompat:$versions.appcompat"
    androidTestImplementation "androidx.recyclerview:recyclerview:$versions.recyclerview"
    androidTestImplementation "com.google.android.material:material:$versions.material"

    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$versions.espresso"

    androidTestImplementation "androidx.arch.core:core-testing:$versions.arch_core"
    androidTestImplementation "org.mockito:mockito-core:$versions.mockito"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito_android"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3"
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'

    //mockito kotlin support
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    //map
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    //UI test for map using ui automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    //material progressbar
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'


}

// we need all open to run tests which we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}
